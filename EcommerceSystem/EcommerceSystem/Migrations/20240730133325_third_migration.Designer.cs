// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer.Context;

#nullable disable

namespace OnlineBookOrderingSystem.Migrations
{
    [DbContext(typeof(EcommerceDBContext))]
    [Migration("20240730133325_third_migration")]
    partial class third_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepositoryLayer.Entity.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CartId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            CartId = 1,
                            ProductId = 2,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 3,
                            CartId = 2,
                            ProductId = 3,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 4,
                            CartId = 2,
                            ProductId = 4,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 5,
                            CartId = 3,
                            ProductId = 5,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 6,
                            CartId = 3,
                            ProductId = 6,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 7,
                            CartId = 4,
                            ProductId = 7,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 8,
                            CartId = 4,
                            ProductId = 8,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 9,
                            CartId = 5,
                            ProductId = 9,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 10,
                            CartId = 5,
                            ProductId = 10,
                            Quantity = 1
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Electronics"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Clothing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Books"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Home & Kitchen"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Sports & Outdoors"
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "alice@example.com",
                            Name = "Alice",
                            PasswordHash = "Password123"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bob@example.com",
                            Name = "Bob",
                            PasswordHash = "Password123"
                        },
                        new
                        {
                            Id = 3,
                            Email = "charlie@example.com",
                            Name = "Charlie",
                            PasswordHash = "Password123"
                        },
                        new
                        {
                            Id = 4,
                            Email = "dave@example.com",
                            Name = "Dave",
                            PasswordHash = "Password123"
                        },
                        new
                        {
                            Id = 5,
                            Email = "eve@example.com",
                            Name = "Eve",
                            PasswordHash = "Password123"
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notifications");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            Date = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6568),
                            IsRead = false,
                            Message = "Your order has been shipped."
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            Date = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6572),
                            IsRead = false,
                            Message = "Your order has been delivered."
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1,
                            OrderDate = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6340)
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2,
                            OrderDate = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6345)
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3,
                            OrderDate = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6346)
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4,
                            OrderDate = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6348)
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5,
                            OrderDate = new DateTime(2024, 7, 30, 13, 33, 24, 969, DateTimeKind.Utc).AddTicks(6349)
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1,
                            Quantity = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 2,
                            ProductId = 2,
                            Quantity = 2
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 3,
                            ProductId = 3,
                            Quantity = 3
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 4,
                            ProductId = 4,
                            Quantity = 4
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 5,
                            ProductId = 5,
                            Quantity = 5
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Latest model with all the features",
                            Name = "Smartphone",
                            Price = 699.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Description = "Powerful and portable",
                            Name = "Laptop",
                            Price = 999.99m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Noise-cancelling over-ear headphones",
                            Name = "Headphones",
                            Price = 199.99m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Track your fitness and stay connected",
                            Name = "Smartwatch",
                            Price = 149.99m,
                            Stock = 75
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            Description = "Portable and powerful sound",
                            Name = "Bluetooth Speaker",
                            Price = 99.99m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Comfortable cotton t-shirt",
                            Name = "T-shirt",
                            Price = 19.99m,
                            Stock = 200
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Description = "Stylish and durable",
                            Name = "Jeans",
                            Price = 49.99m,
                            Stock = 100
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Warm and fashionable",
                            Name = "Jacket",
                            Price = 89.99m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Comfortable and trendy",
                            Name = "Sneakers",
                            Price = 69.99m,
                            Stock = 120
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 2,
                            Description = "Stylish and protective",
                            Name = "Hat",
                            Price = 14.99m,
                            Stock = 180
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 3,
                            Description = "A thrilling novel",
                            Name = "Fiction Book",
                            Price = 14.99m,
                            Stock = 150
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 3,
                            Description = "Informative and engaging",
                            Name = "Non-Fiction Book",
                            Price = 19.99m,
                            Stock = 130
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 3,
                            Description = "Delicious recipes from around the world",
                            Name = "Cookbook",
                            Price = 24.99m,
                            Stock = 90
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 3,
                            Description = "Fun and educational",
                            Name = "Children's Book",
                            Price = 9.99m,
                            Stock = 170
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 3,
                            Description = "Essential for students",
                            Name = "Textbook",
                            Price = 59.99m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 4,
                            Description = "High-speed for smoothies",
                            Name = "Blender",
                            Price = 49.99m,
                            Stock = 110
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 4,
                            Description = "Powerful and efficient",
                            Name = "Vacuum Cleaner",
                            Price = 149.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 4,
                            Description = "Brew the perfect cup",
                            Name = "Coffee Maker",
                            Price = 79.99m,
                            Stock = 70
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 4,
                            Description = "Non-stick and durable",
                            Name = "Cookware Set",
                            Price = 99.99m,
                            Stock = 90
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 4,
                            Description = "Stainless steel and elegant",
                            Name = "Cutlery Set",
                            Price = 29.99m,
                            Stock = 140
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 5,
                            Description = "Non-slip and comfortable",
                            Name = "Yoga Mat",
                            Price = 29.99m,
                            Stock = 120
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 5,
                            Description = "Perfect for strength training",
                            Name = "Dumbbells",
                            Price = 49.99m,
                            Stock = 80
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            Description = "Lightweight and comfortable",
                            Name = "Running Shoes",
                            Price = 79.99m,
                            Stock = 110
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 5,
                            Description = "Perfect for camping",
                            Name = "Tent",
                            Price = 99.99m,
                            Stock = 60
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 5,
                            Description = "Track your health and activity",
                            Name = "Fitness Tracker",
                            Price = 59.99m,
                            Stock = 100
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Promotions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "SUMMER2024",
                            Description = "Summer sale 2024",
                            DiscountPercentage = 10m,
                            EndDate = new DateTime(2024, 7, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            Code = "WINTER2024",
                            Description = "Winter sale 2024",
                            DiscountPercentage = 15m,
                            EndDate = new DateTime(2024, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Reviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comment = "Great product!",
                            CustomerId = 1,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 1,
                            Rating = 4
                        },
                        new
                        {
                            Id = 2,
                            Comment = "Excellent quality!",
                            CustomerId = 2,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 2,
                            Rating = 5
                        },
                        new
                        {
                            Id = 3,
                            Comment = "Good value for money.",
                            CustomerId = 3,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 3,
                            Rating = 3
                        },
                        new
                        {
                            Id = 4,
                            Comment = "Very useful.",
                            CustomerId = 4,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 4,
                            Rating = 4
                        },
                        new
                        {
                            Id = 5,
                            Comment = "Highly recommended!",
                            CustomerId = 5,
                            Date = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProductId = 5,
                            Rating = 5
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Wishlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CustomerId = 1
                        },
                        new
                        {
                            Id = 2,
                            CustomerId = 2
                        },
                        new
                        {
                            Id = 3,
                            CustomerId = 3
                        },
                        new
                        {
                            Id = 4,
                            CustomerId = 4
                        },
                        new
                        {
                            Id = 5,
                            CustomerId = 5
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductId = 1,
                            WishlistId = 1
                        },
                        new
                        {
                            Id = 2,
                            ProductId = 2,
                            WishlistId = 2
                        },
                        new
                        {
                            Id = 3,
                            ProductId = 3,
                            WishlistId = 3
                        },
                        new
                        {
                            Id = 4,
                            ProductId = 4,
                            WishlistId = 4
                        },
                        new
                        {
                            Id = 5,
                            ProductId = 5,
                            WishlistId = 5
                        });
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Cart", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Customer", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("RepositoryLayer.Entity.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.CartItem", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLayer.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Order", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.OrderItem", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLayer.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Product", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Review", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLayer.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.WishlistItem", b =>
                {
                    b.HasOne("RepositoryLayer.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryLayer.Entity.Wishlist", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Customer", b =>
                {
                    b.Navigation("Cart")
                        .IsRequired();

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("RepositoryLayer.Entity.Wishlist", b =>
                {
                    b.Navigation("WishlistItems");
                });
#pragma warning restore 612, 618
        }
    }
}
